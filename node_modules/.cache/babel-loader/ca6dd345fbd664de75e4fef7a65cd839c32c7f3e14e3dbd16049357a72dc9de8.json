{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useRouter } from \"vue-router\";\nimport { ROUTES } from \"@/router/routes\";\nimport { formatDate } from \"@/utils/format\";\nimport { onMounted, ref } from \"vue\";\nexport default {\n  name: \"JobPostingManagement\",\n  methods: {\n    formatDate\n  },\n  setup() {\n    const router = useRouter();\n    const jopPostingCount = ref(0);\n    const jobPostingList = ref();\n    const applicantCount = ref(3);\n    const onRegisterJobPostingClick = () => {\n      router.push(ROUTES.JOB_POSTING_REGISTER.path);\n    };\n    const fetchJopPosting = () => {\n      // todo 채용공고 리스트 API 구현 시 아래에 로직 구현 하기\n      // viewType이 career, new, all에 따라 데이터 불러오기\n\n      const data = [{\n        postId: 1,\n        entId: 1,\n        postTitle: '2024년 하반기 시니어 개발자 모집',\n        entName: '우리 바운드 (주)',\n        jobName: '서비스',\n        postImg: require('@/assets/images/logo/company_sample.png'),\n        // 이미지 경로를 require로 수정\n        startDate: '2024-11-01',\n        endDate: '2024-11-15',\n        postState: 'ACTIVE'\n      }];\n      jobPostingList.value = data;\n      jopPostingCount.value = jobPostingList.value.length;\n    };\n    onMounted(() => {\n      fetchJopPosting();\n    });\n    const recruitmentPhase = postState => {\n      switch (postState) {\n        case 'PENDING':\n          return '오픈 전';\n        case 'ACTIVE':\n          return '채용 중';\n        case 'CLOSED':\n          return '채용 마감';\n        default:\n          return '';\n      }\n    };\n    const recruitmentPhaseClass = postState => {\n      switch (postState) {\n        case 'PENDING':\n          return 'phase-open';\n        case 'ACTIVE':\n          return 'phase-in-progress';\n        case 'CLOSED':\n          return 'phase-closed';\n        default:\n          return '';\n      }\n    };\n    const onMoveDetailPageClick = postId => {\n      console.log(\"postId:\", postId);\n      router.push({\n        name: ROUTES.JOB_POSTING_DETAIL.name,\n        params: {\n          id: postId\n        }\n      });\n    };\n    const onMoveApplicantDetailPageClick = postId => {\n      console.log(\"postId:\", postId);\n      router.push({\n        name: ROUTES.APPLICANT_DETAIL_PAGE.name\n      });\n    };\n    return {\n      jopPostingCount,\n      jobPostingList,\n      applicantCount,\n      onRegisterJobPostingClick,\n      recruitmentPhase,\n      recruitmentPhaseClass,\n      onMoveDetailPageClick,\n      onMoveApplicantDetailPageClick\n    };\n  }\n};","map":{"version":3,"names":["useRouter","ROUTES","formatDate","onMounted","ref","name","methods","setup","router","jopPostingCount","jobPostingList","applicantCount","onRegisterJobPostingClick","push","JOB_POSTING_REGISTER","path","fetchJopPosting","data","postId","entId","postTitle","entName","jobName","postImg","require","startDate","endDate","postState","value","length","recruitmentPhase","recruitmentPhaseClass","onMoveDetailPageClick","console","log","JOB_POSTING_DETAIL","params","id","onMoveApplicantDetailPageClick","APPLICANT_DETAIL_PAGE"],"sources":["/Users/sol/Desktop/fisa/wooribound-web/src/views/CorporateUser/JobPostingManagement.vue"],"sourcesContent":["<script>\nimport {useRouter} from \"vue-router\";\nimport {ROUTES} from \"@/router/routes\";\nimport {formatDate} from \"@/utils/format\";\nimport {onMounted, ref} from \"vue\";\n\nexport default {\n  name: \"JobPostingManagement\",\n  methods: { formatDate },\n  setup() {\n    const router = useRouter();\n\n    const jopPostingCount = ref(0);\n    const jobPostingList = ref();\n    const applicantCount = ref(3);\n    const onRegisterJobPostingClick = () => {\n      router.push(ROUTES.JOB_POSTING_REGISTER.path);\n    }\n\n    const fetchJopPosting = () => {\n      // todo 채용공고 리스트 API 구현 시 아래에 로직 구현 하기\n      // viewType이 career, new, all에 따라 데이터 불러오기\n\n      const data = [\n        {\n          postId: 1,\n          entId: 1,\n          postTitle: '2024년 하반기 시니어 개발자 모집',\n          entName: '우리 바운드 (주)',\n          jobName: '서비스',\n          postImg: require('@/assets/images/logo/company_sample.png'), // 이미지 경로를 require로 수정\n          startDate: '2024-11-01',\n          endDate: '2024-11-15',\n          postState: 'ACTIVE',\n        },\n      ];\n\n      jobPostingList.value = data;\n      jopPostingCount.value = jobPostingList.value.length;\n    }\n\n    onMounted(() => {\n      fetchJopPosting();\n    })\n\n    const recruitmentPhase = (postState) => {\n      switch (postState) {\n        case 'PENDING':\n          return '오픈 전';\n        case 'ACTIVE':\n          return '채용 중';\n        case 'CLOSED':\n          return '채용 마감';\n        default:\n          return '';\n      }\n    }\n\n    const recruitmentPhaseClass = (postState) => {\n      switch (postState) {\n        case 'PENDING':\n          return 'phase-open';\n        case 'ACTIVE':\n          return 'phase-in-progress';\n        case 'CLOSED':\n          return 'phase-closed';\n        default:\n          return '';\n      }\n    }\n\n    const onMoveDetailPageClick = (postId) => {\n      console.log(\"postId:\", postId);\n      router.push({\n        name: ROUTES.JOB_POSTING_DETAIL.name,\n        params:{\n          id: postId\n        },\n      })\n    }\n\n    const onMoveApplicantDetailPageClick = (postId) => {\n      console.log(\"postId:\", postId);\n      router.push({\n        name: ROUTES.APPLICANT_DETAIL_PAGE.name,\n      })\n    }\n\n    return {\n      jopPostingCount,\n      jobPostingList,\n      applicantCount,\n      onRegisterJobPostingClick,\n      recruitmentPhase,\n      recruitmentPhaseClass,\n      onMoveDetailPageClick,\n      onMoveApplicantDetailPageClick\n    };\n  }\n}\n</script>\n\n<template>\n  <main class=\"body\">\n    <div class=\"header\">\n      <div class=\"header-title\">공고 관리</div>\n      <div class=\"header-register-job\" @click=\"onRegisterJobPostingClick\">공고 등록</div>\n    </div>\n    <div class=\"job-posting-wrap\">\n      <div class=\"job-posting-info\">{{ jopPostingCount }}건</div>\n      <div class=\"job-posting-list\" v-for=\"jobPosting in jobPostingList\" :key=\"jobPosting\">\n        <div class=\"job-posting-list-top\">\n          <div class=\"course-title\">{{ jobPosting.entName }}</div>\n          <div :class=\"['recruitment-phase', recruitmentPhaseClass(jobPosting.postState)]\">{{ recruitmentPhase(jobPosting.postState) }}</div>\n        </div>\n        <div class=\"job-posting-list-middle\">\n          <div class=\"course-subtitle\">{{ jobPosting.postTitle }}</div>\n          <div class=\"applicants-info\" @click=\"onMoveApplicantDetailPageClick(jobPosting.postId)\">{{ applicantCount }}명</div>\n        </div>\n        <div class=\"course-schedule\">\n          <div class=\"schedule-info\">{{ formatDate(new Date(jobPosting.startDate)) }} ~ {{ formatDate(new Date(jobPosting.endDate)) }}</div>\n          <img src=\"@/assets/images/icons/rightarrows.png\" class=\"right-arrow-icon\" alt=\"Right Arrow Icon\" @click=\"onMoveDetailPageClick(jobPosting.postId)\">\n        </div>\n      </div>\n    </div>\n  </main>\n</template>\n\n<style scoped>\n.body {\n  flex: 1;\n  padding: 20px;\n  box-sizing: border-box;\n  background-color: #f8f9fa;\n  overflow-y: auto;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between; /* 두 요소를 양 끝에 배치 */\n  align-items: center; /* 세로 정렬을 가운데로 */\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.header-register-job {\n  background-color: #024CAA; /* 버튼 배경색 */\n  color: white; /* 버튼 텍스트 색 */\n  padding: 10px 15px; /* 여백 */\n  border-radius: 5px; /* 모서리 둥글게 */\n  cursor: pointer; /* 포인터 커서 */\n  transition: background-color 0.3s; /* 호버 효과를 위한 전환 */\n  font-size: 10pt;\n}\n\n.header-register-job:hover {\n  background-color: #0056b3; /* 호버 시 배경색 변경 */\n}\n\n.job-posting-wrap {\n  margin-top: 10px;\n}\n\n.job-posting-info {\n  font-size: 20px;\n  font-weight: bold;\n  margin-left: 10px;\n  margin-bottom: 10px;\n}\n\n.job-posting-list {\n  background-color: #D9D9D9;\n  border-radius: 15px;\n  padding: 15px;\n  color: #000000;\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\n.job-posting-list-top {\n  display: flex;\n  justify-content: space-between; /* Aligns items on both ends */\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.course-title {\n  font-size: 18px;\n  margin-right: auto; /* Ensures it stays on the left */\n}\n\n.recruitment-phase {\n  padding: 5px 10px;\n  border-radius: 15px;\n  font-size: 14px;\n  color: #ffffff;\n  font-weight: bold;\n  text-align: center;\n  width: 70px;\n}\n\n/* 상태에 따른 배경색 */\n.phase-open {\n  background-color: #5B99C2;\n}\n\n.phase-in-progress {\n  background-color: #FF9800;\n}\n\n.phase-closed {\n  background-color: #686D76;\n}\n\n.job-posting-list-middle {\n  display: flex;                  /* Flexbox를 사용 */\n  justify-content: space-between; /* 두 요소를 양 끝에 배치 */\n  align-items: center;            /* 세로 정렬을 가운데로 */\n}\n\n.course-subtitle {\n  margin-bottom: 5px;\n  flex: 1;\n}\n\n.applicants-info {\n  font-size: 20px;           /* 글자 크기 */\n  color: #666;               /* 텍스트 색상 */\n  margin-top: 8px;          /* 위쪽 여백 */\n  margin-bottom: 8px;          /* 위쪽 여백 */\n  margin-right: 20px;          /* 위쪽 여백 */\n  cursor: pointer;\n}\n\n.course-schedule {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.schedule-info {\n  flex: 1;\n}\n\n.right-arrow-icon {\n  width: 20px;\n  height: auto;\n  cursor: pointer;\n}\n</style>"],"mappings":";AACA,SAAQA,SAAS,QAAO,YAAY;AACpC,SAAQC,MAAM,QAAO,iBAAiB;AACtC,SAAQC,UAAU,QAAO,gBAAgB;AACzC,SAAQC,SAAS,EAAEC,GAAG,QAAO,KAAK;AAElC,eAAe;EACbC,IAAI,EAAE,sBAAsB;EAC5BC,OAAO,EAAE;IAAEJ;EAAW,CAAC;EACvBK,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIR,SAAS,CAAC,CAAC;IAE1B,MAAMS,eAAc,GAAIL,GAAG,CAAC,CAAC,CAAC;IAC9B,MAAMM,cAAa,GAAIN,GAAG,CAAC,CAAC;IAC5B,MAAMO,cAAa,GAAIP,GAAG,CAAC,CAAC,CAAC;IAC7B,MAAMQ,yBAAwB,GAAIA,CAAA,KAAM;MACtCJ,MAAM,CAACK,IAAI,CAACZ,MAAM,CAACa,oBAAoB,CAACC,IAAI,CAAC;IAC/C;IAEA,MAAMC,eAAc,GAAIA,CAAA,KAAM;MAC5B;MACA;;MAEA,MAAMC,IAAG,GAAI,CACX;QACEC,MAAM,EAAE,CAAC;QACTC,KAAK,EAAE,CAAC;QACRC,SAAS,EAAE,sBAAsB;QACjCC,OAAO,EAAE,YAAY;QACrBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAEC,OAAO,CAAC,yCAAyC,CAAC;QAAE;QAC7DC,SAAS,EAAE,YAAY;QACvBC,OAAO,EAAE,YAAY;QACrBC,SAAS,EAAE;MACb,CAAC,CACF;MAEDjB,cAAc,CAACkB,KAAI,GAAIX,IAAI;MAC3BR,eAAe,CAACmB,KAAI,GAAIlB,cAAc,CAACkB,KAAK,CAACC,MAAM;IACrD;IAEA1B,SAAS,CAAC,MAAM;MACda,eAAe,CAAC,CAAC;IACnB,CAAC;IAED,MAAMc,gBAAe,GAAKH,SAAS,IAAK;MACtC,QAAQA,SAAS;QACf,KAAK,SAAS;UACZ,OAAO,MAAM;QACf,KAAK,QAAQ;UACX,OAAO,MAAM;QACf,KAAK,QAAQ;UACX,OAAO,OAAO;QAChB;UACE,OAAO,EAAE;MACb;IACF;IAEA,MAAMI,qBAAoB,GAAKJ,SAAS,IAAK;MAC3C,QAAQA,SAAS;QACf,KAAK,SAAS;UACZ,OAAO,YAAY;QACrB,KAAK,QAAQ;UACX,OAAO,mBAAmB;QAC5B,KAAK,QAAQ;UACX,OAAO,cAAc;QACvB;UACE,OAAO,EAAE;MACb;IACF;IAEA,MAAMK,qBAAoB,GAAKd,MAAM,IAAK;MACxCe,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEhB,MAAM,CAAC;MAC9BV,MAAM,CAACK,IAAI,CAAC;QACVR,IAAI,EAAEJ,MAAM,CAACkC,kBAAkB,CAAC9B,IAAI;QACpC+B,MAAM,EAAC;UACLC,EAAE,EAAEnB;QACN;MACF,CAAC;IACH;IAEA,MAAMoB,8BAA6B,GAAKpB,MAAM,IAAK;MACjDe,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEhB,MAAM,CAAC;MAC9BV,MAAM,CAACK,IAAI,CAAC;QACVR,IAAI,EAAEJ,MAAM,CAACsC,qBAAqB,CAAClC;MACrC,CAAC;IACH;IAEA,OAAO;MACLI,eAAe;MACfC,cAAc;MACdC,cAAc;MACdC,yBAAyB;MACzBkB,gBAAgB;MAChBC,qBAAqB;MACrBC,qBAAqB;MACrBM;IACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}