{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"overlay\"\n};\nconst _hoisted_2 = {\n  class: \"modal\"\n};\nconst _hoisted_3 = {\n  class: \"modal-content\"\n};\nconst _hoisted_4 = {\n  class: \"modal-message\"\n};\nconst _hoisted_5 = {\n  class: \"button-wrap\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"p\", _hoisted_4, _toDisplayString($setup.props.modalMessage), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    class: \"left-modal-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.onLeftModalButtonClick && $setup.onLeftModalButtonClick(...args))\n  }, _toDisplayString($setup.props.leftButtonText), 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"right-modal-button\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.onRightModalButtonClick && $setup.onRightModalButtonClick(...args))\n  }, _toDisplayString($setup.props.rightButtonText), 1 /* TEXT */)])])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$setup","props","modalMessage","_hoisted_5","onClick","_cache","args","onLeftModalButtonClick","leftButtonText","onRightModalButtonClick","rightButtonText"],"sources":["/Users/sol/Desktop/fisa/wooribound-web/src/components/TwoButtonModal.vue"],"sourcesContent":["<script>\nimport { useRouter } from 'vue-router';\n\nexport default {\n  name: \"TwoButtonModal\",\n  props: {\n    modalMessage: {\n      type: String,\n      required: true,\n    },\n    leftButtonText: {\n      type: String,\n      default: '확인', // 기본 버튼 텍스트\n    },\n    rightButtonText: {\n      type: String,\n      default: '취소', // 기본 버튼 텍스트\n    },\n    routerPath: {\n      type: String,\n      required: true,\n    }\n  },\n  setup(props, {emit}) {\n    const router = useRouter(); // useRouter 훅을 사용하여 라우터 인스턴스를 가져옵니다.\n\n    const onLeftModalButtonClick = () => {\n      if (props.routerPath) {\n        router.push(props.routerPath); // 라우터 경로로 이동\n      }\n      emit('close-modal', false);\n    }\n\n    const onRightModalButtonClick = () => {\n      if (props.routerPath) {\n        router.push(props.routerPath); // 라우터 경로로 이동\n      }\n      emit('close-modal', false);\n    }\n\n    return {\n      props,\n      onLeftModalButtonClick,\n      onRightModalButtonClick,\n    };\n  }\n};\n</script>\n\n<template>\n  <div class=\"overlay\">\n    <div class=\"modal\">\n      <div class=\"modal-content\">\n        <p class=\"modal-message\">{{ props.modalMessage }}</p>\n        <div class=\"button-wrap\">\n          <button class=\"left-modal-button\" @click=\"onLeftModalButtonClick\">{{ props.leftButtonText }}</button>\n          <button class=\"right-modal-button\" @click=\"onRightModalButtonClick\">{{ props.rightButtonText }}</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.overlay {\n  position: fixed; /* 고정 위치 */\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5); /* 반투명 배경 */\n  display: flex;\n  align-items: center; /* 세로 중앙 정렬 */\n  justify-content: center; /* 가로 중앙 정렬 */\n  z-index: 1000; /* 다른 요소들 위에 표시 */\n}\n\n.modal {\n  background-color: white; /* 모달 배경색 */\n  border-radius: 8px; /* 모서리 둥글게 */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* 그림자 효과 */\n  padding: 20px; /* 내부 여백 */\n  width: 300px; /* 모달 너비 */\n  height: 150px;\n  display: flex; /* 플렉스 박스 사용 */\n  flex-direction: column; /* 세로 방향 정렬 */\n  justify-content: center; /* 세로 중앙 정렬 */\n}\n\n.modal-content {\n  display: flex;\n  flex-direction: column; /* 세로 방향 정렬 */\n  align-items: center; /* 가로 중앙 정렬 */\n}\n\n.modal-message {\n  margin-bottom: 45px; /* 메시지와 버튼 사이 여백 */\n  text-align: center; /* 텍스트 중앙 정렬 */\n}\n\n.button-wrap {\n  display: flex; /* 버튼을 수평으로 정렬 */\n  gap: 10px; /* 버튼 간 간격 */\n  justify-content: center; /* 버튼을 중앙 정렬 */\n}\n\n\n.left-modal-button {\n  padding: 10px 20px; /* 버튼 내부 여백 */\n  border: none; /* 기본 테두리 제거 */\n  border-radius: 5px; /* 모서리 둥글게 */\n  background-color: #024CAA; /* 버튼 배경색 */\n  color: white; /* 버튼 텍스트 색상 */\n  cursor: pointer; /* 포인터 커서로 변경 */\n  transition: background-color 0.3s; /* 배경색 변화 애니메이션 */\n  width: 150px;\n}\n\n.left-modal-button:hover {\n  background-color: #003a7a; /* 호버 시 배경색 변화 */\n}\n\n.right-modal-button {\n  padding: 10px 20px; /* 버튼 내부 여백 */\n  border: none; /* 기본 테두리 제거 */\n  border-radius: 5px; /* 모서리 둥글게 */\n  background-color: #024CAA; /* 버튼 배경색 */\n  color: white; /* 버튼 텍스트 색상 */\n  cursor: pointer; /* 포인터 커서로 변경 */\n  transition: background-color 0.3s; /* 배경색 변화 애니메이션 */\n  width: 150px;\n}\n\n.right-modal-button:hover {\n  background-color: #003a7a; /* 호버 시 배경색 변화 */\n}\n</style>\n"],"mappings":";;EAkDOA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC;AAAO;;EACXA,KAAK,EAAC;AAAe;;EACrBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAa;;uBAJ9BC,mBAAA,CAUM,OAVNC,UAUM,GATJC,mBAAA,CAQM,OARNC,UAQM,GAPJD,mBAAA,CAMM,OANNE,UAMM,GALJF,mBAAA,CAAqD,KAArDG,UAAqD,EAAAC,gBAAA,CAAzBC,MAAA,CAAAC,KAAK,CAACC,YAAY,kBAC9CP,mBAAA,CAGM,OAHNQ,UAGM,GAFJR,mBAAA,CAAqG;IAA7FH,KAAK,EAAC,mBAAmB;IAAEY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEN,MAAA,CAAAO,sBAAA,IAAAP,MAAA,CAAAO,sBAAA,IAAAD,IAAA,CAAsB;sBAAKN,MAAA,CAAAC,KAAK,CAACO,cAAc,kBACzFb,mBAAA,CAAwG;IAAhGH,KAAK,EAAC,oBAAoB;IAAEY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEN,MAAA,CAAAS,uBAAA,IAAAT,MAAA,CAAAS,uBAAA,IAAAH,IAAA,CAAuB;sBAAKN,MAAA,CAAAC,KAAK,CAACS,eAAe,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}