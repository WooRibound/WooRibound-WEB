{"ast":null,"code":"import { ref, computed } from 'vue';\nimport ModalPopup from \"@/components/SingleButtonModal.vue\";\nimport { ROUTES } from \"@/router/routes\";\nexport default {\n  name: \"CorporateRegisterView\",\n  computed: {\n    ROUTES() {\n      return ROUTES;\n    }\n  },\n  components: {\n    ModalPopup\n  },\n  setup() {\n    const modalPopupStatue = ref(false);\n    const idInput = ref(\"\"); // 아이디 입력 값\n    const duplicateIdMessage = ref(\"\"); // 중복 확인 메시지\n\n    const industries = ref([\"제조업\", \"정보통신\", \"금융업\", \"서비스업\", \"건설업\", \"유통업\", \"에너지 및 환경\", \"농업 및 어업\", \"제약 및 생명과학\"]);\n    const revenue = ref(\"\"); // 원본 숫자 값\n\n    const formattedRevenue = computed({\n      get() {\n        return revenue.value ? new Intl.NumberFormat('ko-KR').format(revenue.value) : \"\";\n      },\n      set(value) {\n        // 콤마를 제거한 후 숫자로 변환하여 원본 값에 저장\n        revenue.value = value.replace(/,/g, '');\n      }\n    });\n    const formatRevenue = event => {\n      const input = event.target.value;\n      // 숫자와 콤마만 허용\n      const sanitizedInput = input.replace(/[^0-9,]/g, ''); // 숫자와 콤마를 제외한 모든 문자 제거\n      formattedRevenue.value = sanitizedInput; // computed setter가 호출되어 포맷 적용\n    };\n    const onAddressSearchClick = () => {\n      // todo 다음 주소 api로 로직 주소 찾기 로직 구현하기\n      console.log(\"주소찾기\");\n    };\n    const onRegisterClick = () => {\n      modalPopupStatue.value = true;\n    };\n\n    // 중복 확인 함수\n    const onCheckDuplicateIdClick = () => {\n      // todo [아이디 중복 확인 API] 구현 시 아래 로직 구현하기\n      const existingIds = [\"user1\", \"user2\"]; // 하드코딩된 기존 아이디 예시\n      if (!idInput.value) {\n        alert(\"아이디를 입력해주세요.\");\n        return;\n      }\n      if (existingIds.includes(idInput.value)) {\n        duplicateIdMessage.value = \"* 해당 아이디는 중복입니다.\";\n      } else {\n        duplicateIdMessage.value = \"* 사용 가능한 아이디입니다.\";\n      }\n    };\n    return {\n      modalPopupStatue,\n      industries,\n      formattedRevenue,\n      idInput,\n      duplicateIdMessage,\n      formatRevenue,\n      onAddressSearchClick,\n      onRegisterClick,\n      onCheckDuplicateIdClick\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","ModalPopup","ROUTES","name","components","setup","modalPopupStatue","idInput","duplicateIdMessage","industries","revenue","formattedRevenue","get","value","Intl","NumberFormat","format","set","replace","formatRevenue","event","input","target","sanitizedInput","onAddressSearchClick","console","log","onRegisterClick","onCheckDuplicateIdClick","existingIds","alert","includes"],"sources":["/Users/sol/Desktop/fisa/wooribound-web/src/views/Authentication/CorporateUserRegisterView.vue"],"sourcesContent":["<script>\nimport { ref, computed } from 'vue';\nimport ModalPopup from \"@/components/SingleButtonModal.vue\";\nimport {ROUTES} from \"@/router/routes\";\n\nexport default {\n  name: \"CorporateRegisterView\",\n  computed: {\n    ROUTES() {\n      return ROUTES\n    }\n  },\n  components: {ModalPopup},\n  setup() {\n    const modalPopupStatue = ref(false);\n    const idInput = ref(\"\"); // 아이디 입력 값\n    const duplicateIdMessage = ref(\"\"); // 중복 확인 메시지\n\n    const industries = ref([\n      \"제조업\", \"정보통신\", \"금융업\", \"서비스업\", \"건설업\",\n      \"유통업\", \"에너지 및 환경\", \"농업 및 어업\", \"제약 및 생명과학\"\n    ]);\n\n    const revenue = ref(\"\"); // 원본 숫자 값\n\n    const formattedRevenue = computed({\n      get() {\n        return revenue.value ? new Intl.NumberFormat('ko-KR').format(revenue.value) : \"\";\n      },\n      set(value) {\n        // 콤마를 제거한 후 숫자로 변환하여 원본 값에 저장\n        revenue.value = value.replace(/,/g, '');\n      }\n    });\n\n    const formatRevenue = (event) => {\n      const input = event.target.value;\n      // 숫자와 콤마만 허용\n      const sanitizedInput = input.replace(/[^0-9,]/g, ''); // 숫자와 콤마를 제외한 모든 문자 제거\n      formattedRevenue.value = sanitizedInput; // computed setter가 호출되어 포맷 적용\n    };\n\n    const onAddressSearchClick = () => {\n      // todo 다음 주소 api로 로직 주소 찾기 로직 구현하기\n      console.log(\"주소찾기\");\n    }\n    const onRegisterClick = () => {\n      modalPopupStatue.value = true;\n    }\n\n    // 중복 확인 함수\n    const onCheckDuplicateIdClick = () => {\n      // todo [아이디 중복 확인 API] 구현 시 아래 로직 구현하기\n      const existingIds = [\"user1\", \"user2\"]; // 하드코딩된 기존 아이디 예시\n      if (!idInput.value) {\n        alert(\"아이디를 입력해주세요.\");\n        return;\n      }\n\n      if (existingIds.includes(idInput.value)) {\n        duplicateIdMessage.value = \"* 해당 아이디는 중복입니다.\";\n      } else {\n        duplicateIdMessage.value = \"* 사용 가능한 아이디입니다.\";\n      }\n    }\n\n    return {\n      modalPopupStatue,\n      industries,\n      formattedRevenue,\n      idInput,\n      duplicateIdMessage,\n      formatRevenue,\n      onAddressSearchClick,\n      onRegisterClick,\n      onCheckDuplicateIdClick,\n    };\n  }\n}\n</script>\n\n<template>\n  <main class=\"body\">\n    <div class=\"header\">회원 가입</div>\n    <div class=\"content\">\n      <div class=\"input-section\">\n        <!-- 아이디 입력 -->\n        <div class=\"input-label\">\n          <span class=\"required\">*</span>\n          <input\n            class=\"input-field\"\n            placeholder=\"아이디\"\n            v-model=\"idInput\"\n          />\n          <button class=\"image-register-button\" @click=\"onCheckDuplicateIdClick\">중복확인</button>\n        </div>\n        <!-- 중복 확인 메시지 출력 -->\n        <div class=\"input-label\" style=\"margin-left: 30px; font-size: 10pt\">\n          <span :class=\"{ 'error-message': duplicateIdMessage.includes('중복입니다'), 'success-message': duplicateIdMessage.includes('사용 가능한') }\">\n            {{ duplicateIdMessage }}\n          </span>\n        </div>\n        <!-- 비밀번호 입력 -->\n        <div class=\"input-label\">\n          <span class=\"required\">*</span>\n          <input class=\"input-field\" placeholder=\"비밀번호\" type=\"password\">\n        </div>\n        <!-- 비밀번호 재입력 -->\n        <div class=\"input-label\">\n          <span class=\"required\">*</span>\n          <input class=\"input-field\" placeholder=\"비밀번호 재입력\" type=\"password\">\n        </div>\n        <!-- 대표자명 입력 -->\n        <div class=\"input-label\">\n          <span class=\"required\">*</span>\n          <input class=\"input-field\" placeholder=\"대표자명\">\n        </div>\n        <!-- 기업명 입력 -->\n        <div class=\"input-label\">\n          <span class=\"required\">*</span>\n          <input class=\"input-field\" placeholder=\"기업명\">\n        </div>\n        <!-- 사업자번호 입력 -->\n        <div class=\"input-label\">\n          <span class=\"required\">*</span>\n          <input class=\"input-field\" placeholder=\"사업자 번호\">\n        </div>\n        <!-- 주소 입력 -->\n        <div class=\"input-label\">\n          <span class=\"required\">*</span>\n          <input class=\"input-field\" placeholder=\"주소\" />\n          <button class=\"image-register-button\" @click=\"onAddressSearchClick\">검색</button>\n        </div>\n        <!-- 상세주소 입력 -->\n        <div class=\"input-label\">\n          <span class=\"required\"></span>\n          <input class=\"input-field\" placeholder=\"상세 주소\" style=\"margin-left: 7px\">\n        </div>\n        <!-- 성별 선택 -->\n        <div class=\"input-label\">\n          <span class=\"required\">*</span>\n          <select class=\"input-field\" aria-label=\"기업 규모\">\n            <option value=\"\" disabled selected>기업 규모</option>\n            <option value=\"large\">대기업</option>\n            <option value=\"medium\">중견기업</option>\n            <option value=\"small\">중소기업</option>\n            <option value=\"startup\">스타트업</option>\n          </select>\n        </div>\n        <!-- 산업 선택 -->\n        <div class=\"input-label\">\n          <span class=\"required\">*</span>\n          <select class=\"input-field\" aria-label=\"산업\">\n            <option value=\"\" disabled selected>산업</option>\n            <option v-for=\"industry in industries\" :key=\"industry\" :value=\"industry\">{{ industry }}</option>\n          </select>\n        </div>\n        <!-- 매출액 입력 -->\n        <div class=\"input-label\">\n          <span class=\"required\">*</span>\n          <input\n              class=\"input-field\"\n              placeholder=\"매출액\"\n              type=\"text\"\n              v-model=\"formattedRevenue\"\n              @input=\"formatRevenue\"\n              @keydown=\"formatRevenue\"\n              @keyup=\"formatRevenue\"\n          />\n        </div>\n        <div class=\"job-register-button\" @click=\"onRegisterClick\">회원가입</div>\n      </div>\n    </div>\n  </main>\n  <modal-popup\n      v-if=\"modalPopupStatue\"\n      @close-modal=\"modalPopupStatue = false\"\n      :modal-message=\"'회원가입이 완료되었습니다.'\"\n      :router-path=\"ROUTES.MAIN.path\"\n  />\n</template>\n\n<style scoped>\n.body {\n  flex: 1;\n  padding: 20px;\n  box-sizing: border-box;\n  background-color: #f8f9fa;\n  overflow-y: auto;\n}\n\n.header {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  height: 100%;\n}\n\n.input-section {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  flex: 1;\n}\n\n.input-label {\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\n.required {\n  color: #F60F0F;\n  margin-right: 5px;\n}\n\n.input-field {\n  width: 100%;\n  padding: 10px;\n  margin: 10px 10px 10px 0; /* 오른쪽 여백 추가 */\n  box-sizing: border-box;\n  font-size: 16px;\n  border-radius: 8px;\n  border: 1px solid #e1e1e1;\n  color: #413F42;\n}\n\n.image-register-button {\n  padding: 0 15px; /* 상하 패딩을 0으로 설정 */\n  background-color: #024CAA; /* 버튼 배경색 */\n  color: white; /* 글자색 */\n  border: none; /* 테두리 없앰 */\n  border-radius: 8px; /* 버튼 모서리 둥글게 */\n  cursor: pointer; /* 커서 포인터로 변경 */\n  margin-left: 10px; /* 아이디 입력 필드와 버튼 간격 */\n  font-size: 14px; /* 글자 크기 */\n  height: 40px; /* 버튼 높이를 아이디 입력 필드와 동일하게 설정 */\n  white-space: nowrap; /* 텍스트가 줄 바꿈되지 않도록 설정 */\n}\n\n.image-register-button:hover {\n  background-color: #023c7a; /* 버튼 호버 시 배경색 변경 */\n}\n\n.job-register-button {\n  width: 90%;\n  padding: 10px;\n  margin-top: 20px;\n  background-color: #024CAA;\n  color: white;\n  text-align: center;\n  cursor: pointer;\n  font-weight: bold;\n  border-radius: 8px;\n}\n\n.error-message {\n  color: #C62E2E;\n}\n\n.success-message {\n  color: #133E87;\n}\n</style>\n"],"mappings":"AACA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAK;AACnC,OAAOC,UAAS,MAAO,oCAAoC;AAC3D,SAAQC,MAAM,QAAO,iBAAiB;AAEtC,eAAe;EACbC,IAAI,EAAE,uBAAuB;EAC7BH,QAAQ,EAAE;IACRE,MAAMA,CAAA,EAAG;MACP,OAAOA,MAAK;IACd;EACF,CAAC;EACDE,UAAU,EAAE;IAACH;EAAU,CAAC;EACxBI,KAAKA,CAAA,EAAG;IACN,MAAMC,gBAAe,GAAIP,GAAG,CAAC,KAAK,CAAC;IACnC,MAAMQ,OAAM,GAAIR,GAAG,CAAC,EAAE,CAAC,EAAE;IACzB,MAAMS,kBAAiB,GAAIT,GAAG,CAAC,EAAE,CAAC,EAAE;;IAEpC,MAAMU,UAAS,GAAIV,GAAG,CAAC,CACrB,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EACnC,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,WAAU,CACzC,CAAC;IAEF,MAAMW,OAAM,GAAIX,GAAG,CAAC,EAAE,CAAC,EAAE;;IAEzB,MAAMY,gBAAe,GAAIX,QAAQ,CAAC;MAChCY,GAAGA,CAAA,EAAG;QACJ,OAAOF,OAAO,CAACG,KAAI,GAAI,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,CAAC,CAACC,MAAM,CAACN,OAAO,CAACG,KAAK,IAAI,EAAE;MAClF,CAAC;MACDI,GAAGA,CAACJ,KAAK,EAAE;QACT;QACAH,OAAO,CAACG,KAAI,GAAIA,KAAK,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;MACzC;IACF,CAAC,CAAC;IAEF,MAAMC,aAAY,GAAKC,KAAK,IAAK;MAC/B,MAAMC,KAAI,GAAID,KAAK,CAACE,MAAM,CAACT,KAAK;MAChC;MACA,MAAMU,cAAa,GAAIF,KAAK,CAACH,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE;MACtDP,gBAAgB,CAACE,KAAI,GAAIU,cAAc,EAAE;IAC3C,CAAC;IAED,MAAMC,oBAAmB,GAAIA,CAAA,KAAM;MACjC;MACAC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACrB;IACA,MAAMC,eAAc,GAAIA,CAAA,KAAM;MAC5BrB,gBAAgB,CAACO,KAAI,GAAI,IAAI;IAC/B;;IAEA;IACA,MAAMe,uBAAsB,GAAIA,CAAA,KAAM;MACpC;MACA,MAAMC,WAAU,GAAI,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;MACxC,IAAI,CAACtB,OAAO,CAACM,KAAK,EAAE;QAClBiB,KAAK,CAAC,cAAc,CAAC;QACrB;MACF;MAEA,IAAID,WAAW,CAACE,QAAQ,CAACxB,OAAO,CAACM,KAAK,CAAC,EAAE;QACvCL,kBAAkB,CAACK,KAAI,GAAI,kBAAkB;MAC/C,OAAO;QACLL,kBAAkB,CAACK,KAAI,GAAI,kBAAkB;MAC/C;IACF;IAEA,OAAO;MACLP,gBAAgB;MAChBG,UAAU;MACVE,gBAAgB;MAChBJ,OAAO;MACPC,kBAAkB;MAClBW,aAAa;MACbK,oBAAoB;MACpBG,eAAe;MACfC;IACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}